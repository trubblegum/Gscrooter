Gscrooter is a super awesome platformer engine for LÖVE (a SCREWformer?), inpired by Gewter (see below), but rebuilt from the ground up.

Kill the stuff! Count the hoppers! Protect your tree! Survive! Make your own levels! And more!

ToDo :
- extendable class system
- fill out sounds
- add inventory
- your idea here

map/mapname/map.lvl defines a map, which links to levels
map/mapname/map.png defines a background image for the map
Levels in /map can be loaded directly
If portal.level then load mapname/level else return to menu

The first line in level.lvl is the floor, which defines the level's bounds (entity level objects wrap to level bounds)

Objects are divided into object and effect level tables. Generally, effects call this:collide(), which checks for collision against the object table, and returns the first collision.
The exception to this is objects of level physicsobject or above (entity, player, enemy, etc)

object:collide() accepts a second parameter condition, which it uses to filter objects being checked.
If type(condition) == 'string' then check against condition supplied
If not condition then check all objects

Object defs in level1.lvl are minimal, but you can customize any object by adding attributes and functions to the prototype, and even override individual objects' update(this, dt) and draw(this) functions. It is generally wise to call a lower order's update and draw at the end of an override function.

Some included example objects :
- platform {p = {x, y, w}}
- scenery {p = {x, y}, bg = 'treetop1.png'} -- behaves like a platform, but renders bg behind, centered and aligned to bottom
- healtree {p = {x, y}, healing  = (HPS)} -- it has an AOE heal effect
- hopper {{p = {x, y}, hp, damage = (DPS)} -- you know what this does
- hopperspawn {} -- just because this is how I did it, doesn't mean you have to
- bommer {}
- bommerspawn {}
- buzzer {}
- buzzerspawn {}
- slither {}
- slitherspawn {}

Note that only object level objects are placed in a level file. Effects are generated on the fly and added using world:addeffect()
Objects can also be created at runtime using world:addobject()

Includes an implementation of HUMP camera and vector from https://github.com/vrld/hump
Includes an implementation of Gspot from https://github.com/trubblegum/Gspot